@RunWith(MockitoJUnitRunner.class)
public class NexusIndexMasterCleanUpControllerTest {

    @InjectMocks
    private NexusIndexMasterCleanUpController controller;

    @Mock
    private NexusMasterHelper nxsMasterHelper;

    @Mock
    private ExceptionHandler exceptionHandler;

    @Mock
    private Map<String, String> masterTableColumn;

    @Mock
    private Map<String, Integer> masterTableCleanup;

    @Mock
    private Map<String, Integer> masterTableInactiveRecCleanup;

    @Test
    public void testBeginProcess() throws Exception {
        // Set up mock values for the @Value annotated fields using reflection
        ReflectionTestUtils.setField(controller, "batchSize", 10);
        ReflectionTestUtils.setField(controller, "masterTableColumn", masterTableColumn);
        ReflectionTestUtils.setField(controller, "masterTableCleanup", masterTableCleanup);
        ReflectionTestUtils.setField(controller, "masterTableInactiveRecCleanup", masterTableInactiveRecCleanup);

        // Set up mock values for the nxsMasterHelper and exceptionHandler dependencies
        doNothing().when(nxsMasterHelper).performTableCleanUp(anyInt(), anyString(), anyString(), anyInt());
        doNothing().when(nxsMasterHelper).performTableInactiveRecCleanUp(anyInt(), anyString(), anyString(), anyInt());
        doNothing().when(controller).performTableTruncate(anyList());
        doNothing().when(exceptionHandler).handleException(anyString(), any(), any());

        // Set up mock values for the cleanup maps
        Map<String, String> masterTableColumnMock = new HashMap<>();
        masterTableColumnMock.put("table1", "column1");
        masterTableColumnMock.put("table2", "column2");
        Map<String, Integer> masterTableCleanupMock = new HashMap<>();
        masterTableCleanupMock.put("table1", 30);
        masterTableCleanupMock.put("table2", 60);
        Map<String, Integer> masterTableInactiveRecCleanupMock = new HashMap<>();
        masterTableInactiveRecCleanupMock.put("table3", 90);

        when(masterTableColumn.entrySet()).thenReturn(masterTableColumnMock.entrySet());
        when(masterTableCleanup.entrySet()).thenReturn(masterTableCleanupMock.entrySet());
        when(masterTableInactiveRecCleanup.entrySet()).thenReturn(masterTableInactiveRecCleanupMock.entrySet());

        // Call the method being tested
        controller.beginProcess();

        // Verify that the cleanup methods were called with the expected arguments
        verify(nxsMasterHelper).performTableCleanUp(10, "table1", "column1", 30);
        verify(nxsMasterHelper).performTableCleanUp(10, "table2", "column2", 60);
        verify(nxsMasterHelper).performTableInactiveRecCleanUp(10, "table3", null, 90);
    }
}
