import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;

public class ProcessFxRateDataTest {

    @Mock
    private IFxRateDao iFxRateDao;
    @Mock
    private FxRateEntityEntityHelper fxRateEntityEntityHelper;
    @Mock
    private Meta meta;
    @Mock
    private Params params;
    
    private ProcessFxRateData processFxRateData;
    private List<Result> fxRateData;
    
    @Before
    public void setUp() {
        iFxRateDao = mock(IFxRateDao.class);
        fxRateEntityEntityHelper = mock(FxRateEntityEntityHelper.class);
        meta = mock(Meta.class);
        params = mock(Params.class);
        when(meta.getParams()).thenReturn(params);
        when(params.getAsAt()).thenReturn("2022-01-01");
        when(params.getRateSetId()).thenReturn("12345");
        fxRateData = new ArrayList<Result>();
        processFxRateData = new ProcessFxRateData(iFxRateDao, fxRateEntityEntityHelper);
    }
    
    @Test
    public void testProcessFxRateData() {
        List<FxRateEntity> fxRateEntitiesData = new ArrayList<FxRateEntity>();
        fxRateEntitiesData.add(new FxRateEntity("USD", "EUR", 1.23));
        when(fxRateEntityEntityHelper.populateFxRateData(eq(fxRateData), anyString(), anyString())).thenReturn(fxRateEntitiesData);
        
        processFxRateData.processFxRateData(fxRateData, meta);
        
        verify(fxRateEntityEntityHelper, times(1)).populateFxRateData(eq(fxRateData), anyString(), anyString());
        verify(iFxRateDao, times(1)).insertFxRateData(eq(fxRateEntitiesData));
    }
    
}
