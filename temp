import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static .mockito.Mockito.*;

public class TableTruncateTest {
  
  @Mock
  private NxsMasterHelper nxsMasterHelper;
  
  @Mock
  private ExceptionHandler exceptionHandler;
  
  private TableTruncate tableTruncate;
  
  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    tableTruncate = new TableTruncate(nxsMasterHelper, exceptionHandler);
  }
  
  // Test when list is null
  @Test(expected = IllegalArgumentException.class)
  public void testTruncateNullList() {
    List<String> list = null;
    tableTruncate.performTableTruncate(list);
  }
  
  // Test when list is empty
  @Test
  public void testTruncateEmptyList() {
    List<String> list = Arrays.asList();
    tableTruncate.performTableTruncate(list);
    verifyZeroInteractions(nxsMasterHelper);
  }
  
  // Test when table is successfully truncated
  @Test
  public void testTruncateSuccess() {
    List<String> list = Arrays.asList("table1", "table2");
    
    doNothing().when(nxsMasterHelper).performTruncateTable("table1");
    doNothing().when(nxsMasterHelper).performTruncateTable("table2");
    
    tableTruncate.performTableTruncate(list);
    
    verify(nxsMasterHelper, times(1)).performTruncateTable("table1");
    verify(nxsMasterHelper, times(1)).performTruncateTable("table2");
    verifyZeroInteractions(exceptionHandler);
  }
  
  // Test when an exception is thrown during truncate
  @Test
  public void testTruncateException() {
    List<String> list = Arrays.asList("table1", "table2");
    Exception ex = new RuntimeException("Test exception");
    
    doThrow(ex).when(nxsMasterHelper).performTruncateTable("table1");
    doNothing().when(nxsMasterHelper).performTruncateTable("table2");
    
    tableTruncate.performTableTruncate(list);
    
    verify(nxsMasterHelper, times(1)).performTruncateTable("table1");
    verify(nxsMasterHelper, times(1)).performTruncateTable("table2");
    verify(exceptionHandler, times(1)).handleException("DBCleanup Table: table1", null, ex);
  }
}
